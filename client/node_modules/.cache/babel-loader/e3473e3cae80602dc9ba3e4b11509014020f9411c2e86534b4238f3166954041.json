{"ast":null,"code":"import axios from 'axios';\nconst API_BASE_URL = process.env.REACT_APP_API_URL || 'http://localhost:5000/api';\n\n// Create axios instance\nconst api = axios.create({\n  baseURL: API_BASE_URL,\n  headers: {\n    'Content-Type': 'application/json'\n  }\n});\n\n// Request interceptor to add auth token\napi.interceptors.request.use(config => {\n  const token = localStorage.getItem('token');\n  if (token) {\n    config.headers.Authorization = `Bearer ${token}`;\n  }\n  return config;\n}, error => {\n  return Promise.reject(error);\n});\n\n// Response interceptor to handle auth errors\napi.interceptors.response.use(response => response, error => {\n  var _error$response;\n  if (((_error$response = error.response) === null || _error$response === void 0 ? void 0 : _error$response.status) === 401) {\n    localStorage.removeItem('token');\n    localStorage.removeItem('user');\n    window.location.href = '/login';\n  }\n  return Promise.reject(error);\n});\n\n// Auth API\nexport const authAPI = {\n  login: credentials => api.post('/auth/login', credentials),\n  signup: userData => api.post('/auth/signup', userData),\n  getMe: () => api.get('/auth/me')\n};\n\n// Complaints API\nexport const complaintsAPI = {\n  getCategories: () => api.get('/complaints/categories'),\n  createComplaint: complaintData => api.post('/complaints', complaintData),\n  getMyComplaints: status => api.get(`/complaints/my${status ? `?status=${status}` : ''}`),\n  getAllComplaints: params => api.get('/complaints/all', {\n    params\n  }),\n  updateComplaintStatus: (id, statusData) => api.put(`/complaints/${id}/status`, statusData),\n  addFeedback: (id, feedbackData) => api.put(`/complaints/${id}/feedback`, feedbackData),\n  getStats: () => api.get('/complaints/stats')\n};\nexport default api;","map":{"version":3,"names":["axios","API_BASE_URL","process","env","REACT_APP_API_URL","api","create","baseURL","headers","interceptors","request","use","config","token","localStorage","getItem","Authorization","error","Promise","reject","response","_error$response","status","removeItem","window","location","href","authAPI","login","credentials","post","signup","userData","getMe","get","complaintsAPI","getCategories","createComplaint","complaintData","getMyComplaints","getAllComplaints","params","updateComplaintStatus","id","statusData","put","addFeedback","feedbackData","getStats"],"sources":["/Users/satya/Desktop/complaint ticket/client/src/utils/api.js"],"sourcesContent":["import axios from 'axios';\n\nconst API_BASE_URL = process.env.REACT_APP_API_URL || 'http://localhost:5000/api';\n\n// Create axios instance\nconst api = axios.create({\n  baseURL: API_BASE_URL,\n  headers: {\n    'Content-Type': 'application/json',\n  },\n});\n\n// Request interceptor to add auth token\napi.interceptors.request.use(\n  (config) => {\n    const token = localStorage.getItem('token');\n    if (token) {\n      config.headers.Authorization = `Bearer ${token}`;\n    }\n    return config;\n  },\n  (error) => {\n    return Promise.reject(error);\n  }\n);\n\n// Response interceptor to handle auth errors\napi.interceptors.response.use(\n  (response) => response,\n  (error) => {\n    if (error.response?.status === 401) {\n      localStorage.removeItem('token');\n      localStorage.removeItem('user');\n      window.location.href = '/login';\n    }\n    return Promise.reject(error);\n  }\n);\n\n// Auth API\nexport const authAPI = {\n  login: (credentials) => api.post('/auth/login', credentials),\n  signup: (userData) => api.post('/auth/signup', userData),\n  getMe: () => api.get('/auth/me'),\n};\n\n// Complaints API\nexport const complaintsAPI = {\n  getCategories: () => api.get('/complaints/categories'),\n  createComplaint: (complaintData) => api.post('/complaints', complaintData),\n  getMyComplaints: (status) => api.get(`/complaints/my${status ? `?status=${status}` : ''}`),\n  getAllComplaints: (params) => api.get('/complaints/all', { params }),\n  updateComplaintStatus: (id, statusData) => api.put(`/complaints/${id}/status`, statusData),\n  addFeedback: (id, feedbackData) => api.put(`/complaints/${id}/feedback`, feedbackData),\n  getStats: () => api.get('/complaints/stats'),\n};\n\nexport default api;"],"mappings":"AAAA,OAAOA,KAAK,MAAM,OAAO;AAEzB,MAAMC,YAAY,GAAGC,OAAO,CAACC,GAAG,CAACC,iBAAiB,IAAI,2BAA2B;;AAEjF;AACA,MAAMC,GAAG,GAAGL,KAAK,CAACM,MAAM,CAAC;EACvBC,OAAO,EAAEN,YAAY;EACrBO,OAAO,EAAE;IACP,cAAc,EAAE;EAClB;AACF,CAAC,CAAC;;AAEF;AACAH,GAAG,CAACI,YAAY,CAACC,OAAO,CAACC,GAAG,CACzBC,MAAM,IAAK;EACV,MAAMC,KAAK,GAAGC,YAAY,CAACC,OAAO,CAAC,OAAO,CAAC;EAC3C,IAAIF,KAAK,EAAE;IACTD,MAAM,CAACJ,OAAO,CAACQ,aAAa,GAAG,UAAUH,KAAK,EAAE;EAClD;EACA,OAAOD,MAAM;AACf,CAAC,EACAK,KAAK,IAAK;EACT,OAAOC,OAAO,CAACC,MAAM,CAACF,KAAK,CAAC;AAC9B,CACF,CAAC;;AAED;AACAZ,GAAG,CAACI,YAAY,CAACW,QAAQ,CAACT,GAAG,CAC1BS,QAAQ,IAAKA,QAAQ,EACrBH,KAAK,IAAK;EAAA,IAAAI,eAAA;EACT,IAAI,EAAAA,eAAA,GAAAJ,KAAK,CAACG,QAAQ,cAAAC,eAAA,uBAAdA,eAAA,CAAgBC,MAAM,MAAK,GAAG,EAAE;IAClCR,YAAY,CAACS,UAAU,CAAC,OAAO,CAAC;IAChCT,YAAY,CAACS,UAAU,CAAC,MAAM,CAAC;IAC/BC,MAAM,CAACC,QAAQ,CAACC,IAAI,GAAG,QAAQ;EACjC;EACA,OAAOR,OAAO,CAACC,MAAM,CAACF,KAAK,CAAC;AAC9B,CACF,CAAC;;AAED;AACA,OAAO,MAAMU,OAAO,GAAG;EACrBC,KAAK,EAAGC,WAAW,IAAKxB,GAAG,CAACyB,IAAI,CAAC,aAAa,EAAED,WAAW,CAAC;EAC5DE,MAAM,EAAGC,QAAQ,IAAK3B,GAAG,CAACyB,IAAI,CAAC,cAAc,EAAEE,QAAQ,CAAC;EACxDC,KAAK,EAAEA,CAAA,KAAM5B,GAAG,CAAC6B,GAAG,CAAC,UAAU;AACjC,CAAC;;AAED;AACA,OAAO,MAAMC,aAAa,GAAG;EAC3BC,aAAa,EAAEA,CAAA,KAAM/B,GAAG,CAAC6B,GAAG,CAAC,wBAAwB,CAAC;EACtDG,eAAe,EAAGC,aAAa,IAAKjC,GAAG,CAACyB,IAAI,CAAC,aAAa,EAAEQ,aAAa,CAAC;EAC1EC,eAAe,EAAGjB,MAAM,IAAKjB,GAAG,CAAC6B,GAAG,CAAC,iBAAiBZ,MAAM,GAAG,WAAWA,MAAM,EAAE,GAAG,EAAE,EAAE,CAAC;EAC1FkB,gBAAgB,EAAGC,MAAM,IAAKpC,GAAG,CAAC6B,GAAG,CAAC,iBAAiB,EAAE;IAAEO;EAAO,CAAC,CAAC;EACpEC,qBAAqB,EAAEA,CAACC,EAAE,EAAEC,UAAU,KAAKvC,GAAG,CAACwC,GAAG,CAAC,eAAeF,EAAE,SAAS,EAAEC,UAAU,CAAC;EAC1FE,WAAW,EAAEA,CAACH,EAAE,EAAEI,YAAY,KAAK1C,GAAG,CAACwC,GAAG,CAAC,eAAeF,EAAE,WAAW,EAAEI,YAAY,CAAC;EACtFC,QAAQ,EAAEA,CAAA,KAAM3C,GAAG,CAAC6B,GAAG,CAAC,mBAAmB;AAC7C,CAAC;AAED,eAAe7B,GAAG","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}